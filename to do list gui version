import tkinter as tk
from tkinter import messagebox
import json

class TaskManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List Application")
        self.root.geometry("600x500")  # Set window size
        self.root.config(bg="#c6f4d6")  # Set background color

        # Load existing tasks
        self.task_list = self.load_tasks()

        self.create_widgets()

    def create_widgets(self):
        # Title Label
        title_label = tk.Label(self.root, text="To-Do List", font=("Helvetica", 24), bg="#f4f4f9", fg="#4CAF50")
        title_label.pack(pady=20)

        # Frame for task list
        self.frame = tk.Frame(self.root, bg="#f7f7f7")
        self.frame.pack(pady=10)

        # Scrollbar
        self.scrollbar = tk.Scrollbar(self.frame)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Listbox to display tasks with styling
        self.task_box = tk.Listbox(self.frame, width=50, height=20, selectmode=tk.SINGLE, yscrollcommand=self.scrollbar.set, font=("Helvetica", 12))
        self.task_box.pack(pady=5)

        # Update scrollbar with listbox
        self.scrollbar.config(command=self.task_box.yview)

        # Entry field to add new tasks
        self.task_entry = tk.Entry(self.root, width=40, font=("Helvetica", 12))
        self.task_entry.pack(pady=10)

        # Buttons with styling
        self.add_button = tk.Button(self.root, text="Add Task", width=30, command=self.add_task, bg="#4CAF50", fg="white", font=("Helvetica", 12))
        self.add_button.pack(pady=5)

        self.remove_button = tk.Button(self.root, text="Remove Task", width=30, command=self.remove_task, bg="#FF5733", fg="white", font=("Helvetica", 12))
        self.remove_button.pack(pady=5)

        self.mark_button = tk.Button(self.root, text="Mark Completed", width=30, command=self.mark_completed, bg="#FFC107", fg="white", font=("Helvetica", 12))
        self.mark_button.pack(pady=5)

        # Refresh task list
        self.refresh_task_list()

        # Status label at the bottom to show feedback to users
        self.status_label = tk.Label(self.root, text="", bg="#f4f4f9", fg="green", font=("Helvetica", 10))
        self.status_label.pack(pady=10)

    def add_task(self):
        task = self.task_entry.get()
        if task != "":
            self.task_list.append({"task": task, "status": "Pending"})
            self.save_tasks()
            self.refresh_task_list()
            self.task_entry.delete(0, tk.END)
            self.update_status("Task Added!", "green")
        else:
            messagebox.showwarning("Input Error", "Please enter a task.")

    def remove_task(self):
        try:
            selected_task_index = self.task_box.curselection()[0]
            del self.task_list[selected_task_index]
            self.save_tasks()
            self.refresh_task_list()
            self.update_status("Task Removed!", "red")
        except IndexError:
            messagebox.showwarning("Selection Error", "Please select a task to remove.")

    def mark_completed(self):
        try:
            selected_task_index = self.task_box.curselection()[0]
            self.task_list[selected_task_index]["status"] = "Completed"
            self.save_tasks()
            self.refresh_task_list()
            self.update_status("Task Completed!", "orange")
        except IndexError:
            messagebox.showwarning("Selection Error", "Please select a task to mark as completed.")

    def refresh_task_list(self):
        # Clear existing tasks in the listbox
        self.task_box.delete(0, tk.END)

        for task in self.task_list:
            # Use .get() to safely access 'task' and 'status', with default values in case they're missing
            task_name = task.get('task', 'Unknown Task')  # Default if 'task' key is missing
            task_status = task.get('status', 'Unknown Status')  # Default if 'status' key is missing

            task_display = f"{task_name} - {task_status}"

            if task_status == "Completed":
                self.task_box.insert(tk.END, task_display)
                self.task_box.itemconfig(tk.END, {'bg': '#e0e0e0'})
            else:
                self.task_box.insert(tk.END, task_display)

    def update_status(self, message, color):
        self.status_label.config(text=message, fg=color)

    def load_tasks(self):
        try:
            with open('task_data.json', 'r') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            return []

    def save_tasks(self):
        with open('task_data.json', 'w') as file:
            json.dump(self.task_list, file)

def main():
    root = tk.Tk()
    app = TaskManagerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
